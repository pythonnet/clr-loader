name: Python Tests

on:
  push:
    branches: master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-dotnet@v1
    - uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build
      run: python -m build
    - name: Upload source distribution
      uses: actions/upload-artifact@v3
      with:
        name: build-output
        path: "dist/*"
        if-no-files-found: error

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depths: 0
    - uses: actions/setup-python@v4
    - name: Install Ruff
      run: pip install ruff
    - name: Check format
      run: ruff format --check
    - name: Check lints
      run: ruff check

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.11', '3.10', '3.9', '3.8'] # pypy3

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Cache Mono
      if: runner.os == 'Windows'
      uses: actions/cache@v2
      with:
        path: ${{ env.TEMP }}\chocolatey
        key: ${{ runner.os }}-chocolatey-${{ matrix.python == 'pypy3' && '32' || '64' }}

    - name: Install Mono
      if: runner.os == 'Windows'
      run: |
        choco install -y mono ${{ matrix.python == 'pypy3' && '--x86' || '' }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest

    - name: Download wheel
      uses: actions/download-artifact@v3
      with:
        name: build-output
        path: dist/

    - name: Install wheel
      shell: bash
      run: |
        pip install dist/*.whl

    - name: Test with pytest
      run: |
        pytest

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-output
        path: dist/

    - name: Deploy to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: startsWith(github.ref, 'refs/head/master')
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: dist/*

    - name: Deploy to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
